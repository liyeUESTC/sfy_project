流程：
test.c-》预处理-》test.i-》编译-》test.s-》汇编-》test.o-》链接-》test.exe

一.预处理：
预处理相当于根据预处理指令组装新的C/C++程序。经过预处理，会产生一个没有宏定义，没有条件编译指令，没有特殊符号的输出文件，这个文件的含义同原本的文件无异，只是内容上有所不同。
1.读取C/C++源程序，对其中的伪指令（以#开头的指令）进行处理
①将所有的“#define”删除，并且展开所有的宏定义
②处理所有的条件编译指令，如：“#if”、“#ifdef”、“#elif”、“#else”、“endif”等。
这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。
预编译程序将根据有关的文件，将那些不必要的代码过滤掉。 
③处理“#include”预编译指令，将被包含的文件插入到该预编译指令的位置。
（注意：这个过程可能是递归进行的，也就是说被包含的文件可能还包含其他文件）
2.删除所有的注释
3.添加行号和文件名标识。
以便于编译时编译器产生调试用的行号信息及用于编译时产生的编译错误或警告时能够显示行号
4.保留所有的#pragma编译器指令


二.编译
将预处理完的文件进行一系列词法分析、语法分析、语义分析及优化后，产生相应的汇编代码文件。


三.汇编
将编译完的汇编代码文件翻译成机器指令，并生成可重定位目标程序的.o文件，该文件为二进制文件，字节编码是机器指令。
汇编器是将汇编代码转变成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。所以汇编器的汇编过程相对于编译器来讲比较简单，它没有复杂的语法，也没有语义，
也不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译即可。


四.链接
通过链接器将一个个目标文件（或许还会有库文件）链接在一起生成一个完整的可执行程序。
由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。
例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；
在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。
链接程序的主要工作就是将有关的目标文件彼此相连接，也就是将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，
使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。


从代码到可执行过程主要分为两个过程：编译，链接
1.编译：每一个cpp为一个编译单元，包括.h展开，生成.o中间文件
2.链接：合并各.o文件

所以在头文件中加#ifdef只能保证在单个cpp编译时不会包含多个同样的头文件  不能保证在多个cpp之间不会包含同样的头文件
这样就会通过编译  但在链接时报错